import * as path from 'path';
import { promises as fs } from 'fs';
import { AgentsMdAgent } from './AgentsMdAgent';
import { IAgentConfig } from './IAgent';
import {
  backupFile,
  ensureDirExists,
  writeGeneratedFile,
} from '../core/FileSystemUtils';

/**
 * GitHub Copilot agent adapter.
 * Extends AgentsMdAgent to write to AGENTS.md (for web-based Copilot)
 * and also writes to .github/copilot-instructions.md (for VS Code extension).
 */
export class CopilotAgent extends AgentsMdAgent {
  getIdentifier(): string {
    return 'copilot';
  }

  getName(): string {
    return 'GitHub Copilot';
  }

  getMcpServerKey(): string {
    return 'servers';
  }

  supportsMcpStdio(): boolean {
    return true;
  }

  supportsMcpRemote(): boolean {
    return true;
  }

  async applyRulerConfig(
    concatenatedRules: string,
    projectRoot: string,
    rulerMcpJson: Record<string, unknown> | null,
    agentConfig?: IAgentConfig,
    backup = true,
  ): Promise<void> {
    // First, call the parent class method to write to AGENTS.md
    await super.applyRulerConfig(
      concatenatedRules,
      projectRoot,
      rulerMcpJson,
      agentConfig,
      backup,
    );

    // Additionally write to .github/copilot-instructions.md for VS Code extension compatibility
    const legacyPath = path.join(
      projectRoot,
      '.github',
      'copilot-instructions.md',
    );
    await ensureDirExists(path.dirname(legacyPath));

    // Add marker comment to the content to identify it as generated
    const contentWithMarker = `<!-- Generated by Ruler -->\n${concatenatedRules}`;

    // Read existing content if present and skip write if identical (idempotency)
    let existing: string | null = null;
    try {
      existing = await fs.readFile(legacyPath, 'utf8');
    } catch {
      existing = null;
    }

    if (existing !== null && existing === contentWithMarker) {
      // No change; skip backup/write for idempotency
      return;
    }

    // Backup (only if file existed and backup is enabled) then write new content
    if (backup) {
      await backupFile(legacyPath);
    }
    await writeGeneratedFile(legacyPath, contentWithMarker);
  }
}
