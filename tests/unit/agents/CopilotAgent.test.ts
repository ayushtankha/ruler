import { promises as fs } from 'fs';
import * as path from 'path';
import { CopilotAgent } from '../../../src/agents/CopilotAgent';
import { AgentsMdAgent } from '../../../src/agents/AgentsMdAgent';
import { setupTestProject, teardownTestProject } from '../../harness';

describe('CopilotAgent', () => {
  it('should be defined', () => {
    expect(new CopilotAgent()).toBeDefined();
  });

  it('should extend AgentsMdAgent', () => {
    const agent = new CopilotAgent();
    expect(agent instanceof AgentsMdAgent).toBe(true);
  });

  it('should have the correct identifier', () => {
    const agent = new CopilotAgent();
    expect(agent.getIdentifier()).toBe('copilot');
  });

  it('should have the correct name', () => {
    const agent = new CopilotAgent();
    expect(agent.getName()).toBe('GitHub Copilot');
  });

  it('should support MCP stdio and remote', () => {
    const agent = new CopilotAgent();
    expect(agent.supportsMcpStdio()).toBe(true);
    expect(agent.supportsMcpRemote()).toBe(true);
  });

  it('should use servers as MCP key', () => {
    const agent = new CopilotAgent();
    expect(agent.getMcpServerKey()).toBe('servers');
  });

  it('writes rules to AGENTS.md file via base class', async () => {
    const { projectRoot } = await setupTestProject({
      '.ruler/AGENTS.md': 'Rule A',
    });
    try {
      const agent = new CopilotAgent();
      const rules = 'Combined rules\n- Rule A';

      await agent.applyRulerConfig(rules, projectRoot, null);

      // AGENTS.md should be written at the repository root
      const agentsMdPath = path.join(projectRoot, 'AGENTS.md');
      const content = await fs.readFile(agentsMdPath, 'utf8');
      expect(content).toContain('Rule A');
      expect(content).toContain('Generated by Ruler');
    } finally {
      await teardownTestProject(projectRoot);
    }
  });
});