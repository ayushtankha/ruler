import * as fs from 'fs/promises';
import * as path from 'path';
import * as os from 'os';
import { readMarkdownFiles } from '../../../src/core/FileSystemUtils';

describe('AGENTS.md duplicate content prevention', () => {
  let tmpDir: string;
  let rulerDir: string;

  beforeEach(async () => {
    tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ruler-test-'));
    rulerDir = path.join(tmpDir, '.ruler');
    await fs.mkdir(rulerDir, { recursive: true });
  });

  afterEach(async () => {
    await fs.rm(tmpDir, { recursive: true, force: true });
  });

  it('should include root AGENTS.md when no marker is present', async () => {
    // Create a .ruler/instructions.md file
    const rulerInstructions = 'These are ruler instructions.';
    await fs.writeFile(path.join(rulerDir, 'instructions.md'), rulerInstructions);

    // Create a root AGENTS.md file without marker
    const rootAgentsContent = 'This is root AGENTS.md content.';
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), rootAgentsContent);

    const files = await readMarkdownFiles(rulerDir);

    // Should include both files
    expect(files).toHaveLength(2);
    expect(files[0].content).toBe(rootAgentsContent);
    expect(files[1].content).toBe(rulerInstructions);
  });

  it('should skip root AGENTS.md when marker is present and .ruler has files', async () => {
    // Create a .ruler/instructions.md file
    const rulerInstructions = 'These are ruler instructions.';
    await fs.writeFile(path.join(rulerDir, 'instructions.md'), rulerInstructions);

    // Create a root AGENTS.md file WITH marker
    const rootAgentsContent = '<!-- Generated by Ruler -->\nThis is generated content.';
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), rootAgentsContent);

    const files = await readMarkdownFiles(rulerDir);

    // Should only include the .ruler file, skip the generated root AGENTS.md
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe(rulerInstructions);
  });

  it('should include root AGENTS.md with marker when .ruler has no files', async () => {
    // Create a root AGENTS.md file WITH marker but no .ruler files
    const rootAgentsContent = '<!-- Generated by Ruler -->\nThis is generated content.';
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), rootAgentsContent);

    const files = await readMarkdownFiles(rulerDir);

    // Should include the root AGENTS.md since there are no .ruler files
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe(rootAgentsContent);
  });

  it('should include root AGENTS.md with marker when inside .ruler directory', async () => {
    // Create AGENTS.md inside .ruler directory with marker
    const agentsContent = '<!-- Generated by Ruler -->\nInside ruler directory.';
    await fs.writeFile(path.join(rulerDir, 'AGENTS.md'), agentsContent);

    const files = await readMarkdownFiles(rulerDir);

    // Should include the .ruler/AGENTS.md file
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe(agentsContent);
  });
});