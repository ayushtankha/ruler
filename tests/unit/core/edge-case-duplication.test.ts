import * as fs from 'fs/promises';
import * as path from 'path';
import * as os from 'os';
import { readMarkdownFiles } from '../../../src/core/FileSystemUtils';

/**
 * Test specific edge cases that might cause the bug to surface
 */
describe('Edge case duplication scenarios', () => {
  let tmpDir: string;
  let rulerDir: string;

  beforeEach(async () => {
    tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ruler-edge-test-'));
    rulerDir = path.join(tmpDir, '.ruler');
    await fs.mkdir(rulerDir, { recursive: true });
  });

  afterEach(async () => {
    await fs.rm(tmpDir, { recursive: true, force: true });
  });

  it('should handle the case when both root AGENTS.md and .ruler/AGENTS.md exist', async () => {
    // This might be the exact bug scenario
    
    // Step 1: Create .ruler/AGENTS.md with original content
    const rulerAgentsContent = 'Original rules from .ruler/AGENTS.md';
    await fs.writeFile(path.join(rulerDir, 'AGENTS.md'), rulerAgentsContent);
    
    // Step 2: First read should include only the .ruler/AGENTS.md
    let files = await readMarkdownFiles(rulerDir);
    console.log('First read - files:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Step 3: Create generated root AGENTS.md (like AgentsMd would do)
    const generatedContent = `<!-- Generated by Ruler -->\n${rulerAgentsContent}`;
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), generatedContent);
    
    // Step 4: Second read should still only include .ruler/AGENTS.md (skip the generated root one)
    files = await readMarkdownFiles(rulerDir);
    console.log('Second read - files:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Should still be just the .ruler/AGENTS.md file, no duplication
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe(rulerAgentsContent);
    expect(files[0].content).not.toContain('<!-- Generated by Ruler -->');
  });

  it('should handle case with nested directories in .ruler', async () => {
    // Maybe the bug happens with nested structure
    
    // Create nested structure
    await fs.mkdir(path.join(rulerDir, 'sub'), { recursive: true });
    await fs.writeFile(path.join(rulerDir, 'main.md'), 'Main content');
    await fs.writeFile(path.join(rulerDir, 'sub', 'nested.md'), 'Nested content');
    
    // First read
    let files = await readMarkdownFiles(rulerDir);
    console.log('Nested structure - first read:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Create generated root AGENTS.md
    const generatedContent = `<!-- Generated by Ruler -->\nMain content\n\nNested content`;
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), generatedContent);
    
    // Second read - should skip the generated root file
    files = await readMarkdownFiles(rulerDir);
    console.log('Nested structure - second read:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Should still have the same files from .ruler directory
    expect(files).toHaveLength(2);
    expect(files.some(f => f.content === 'Main content')).toBe(true);
    expect(files.some(f => f.content === 'Nested content')).toBe(true);
    expect(files.every(f => !f.content.includes('<!-- Generated by Ruler -->'))).toBe(true);
  });

  it('should handle empty ruler directory with generated root file', async () => {
    // This might cause the bug if the logic is wrong
    
    // Start with empty .ruler directory
    // But create a generated root AGENTS.md
    const generatedContent = '<!-- Generated by Ruler -->\nSome generated content';
    await fs.writeFile(path.join(tmpDir, 'AGENTS.md'), generatedContent);
    
    // Read files - should include the generated file since there are no .ruler files
    let files = await readMarkdownFiles(rulerDir);
    console.log('Empty .ruler with generated root:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Should include the generated file since there are no ruler files
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe(generatedContent);
    
    // Now add a file to .ruler
    await fs.writeFile(path.join(rulerDir, 'new.md'), 'New ruler content');
    
    // Read again - should now skip the generated root file
    files = await readMarkdownFiles(rulerDir);
    console.log('After adding file to .ruler:');
    files.forEach(f => console.log(`  ${f.path}: ${JSON.stringify(f.content)}`));
    
    // Should only include the new ruler file
    expect(files).toHaveLength(1);
    expect(files[0].content).toBe('New ruler content');
    expect(files[0].content).not.toContain('<!-- Generated by Ruler -->');
  });
});